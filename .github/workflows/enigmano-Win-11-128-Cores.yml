name: "‚ö° Custom RDP Session (4-Core, 16GB RAM) - Corrected"

on:
  workflow_dispatch:

jobs:
  build:
    name: "üöÄ Start Windows RDP Session"
    runs-on: windows-latest

    env:
      NGROK_AUTH_TOKEN: ${{ secrets.NGROK_SHAHZAIB }}

    steps:
      - name: "üõ°Ô∏è Create User and Enable RDP"
        shell: pwsh
        run: |
          $password = "jj" # Change this to a secure password
          $user = "runneradmin"
          iex "net user /add $user $password"
          iex "net localgroup administrators $user /add"
          
          # The following commands enable Remote Desktop
          iex "reg add 'HKLM\System\CurrentControlSet\Control\Terminal Server' /v fDenyTSConnections /t REG_DWORD /d 0 /f"
          iex "reg add 'HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' /v UserAuthentication /t REG_DWORD /d 1 /f"
          Write-Host "‚úÖ User account created and RDP enabled."

      - name: "‚òÅÔ∏è Download and Configure Ngrok"
        shell: pwsh
        run: |
          # Download and unzip Ngrok into a dedicated 'ngrok' folder
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Expand-Archive ngrok.zip -DestinationPath "ngrok"
          
          # Move into the ngrok directory
          cd ngrok

          # Verify ngrok.exe exists before proceeding
          if (-not (Test-Path "./ngrok.exe")) {
            Write-Error "‚ùå ngrok.exe not found after extraction!"
            exit 1
          }
          
          # Authenticate and start the tunnel, outputting the log to the parent directory
          ./ngrok.exe authtoken $env:NGROK_AUTH_TOKEN
          ./ngrok.exe tcp 3389 --log "stdout" > ../ngrok.log &
          
          Write-Host "‚úÖ Ngrok setup complete. Waiting for tunnel..."
          Start-Sleep -s 10

      - name: "üîó Get RDP Connection Details"
        shell: pwsh
        run: |
          # Wait for the ngrok log and extract the connection URL
          $logContent = Get-Content -Path ngrok.log -Wait -Tail 10
          $rdpConnection = ($logContent | Select-String -Pattern "url=(tcp://.+)" | Select-Object -First 1).Matches.Groups[1].Value
          
          if ($rdpConnection) {
            Write-Host " "
            Write-Host "‚úÖ RDP Connection Ready!"
            Write-Host "   Connect to: $rdpConnection"
            Write-Host "   Username: runneradmin"
            Write-Host "   Password: your-strong-password-here" # The password you set above
            Write-Host " "
          } else {
            Write-Error "‚ùå Could not find Ngrok URL in the log. Check the previous step for errors."
          }

      - name: "‚è≥ Keep RDP Session Alive"
        shell: pwsh
        run: |
          Write-Host "‚úÖ RDP session is active."
          Write-Host "   To end the session, cancel the GitHub Actions workflow."
          Start-Sleep -s 21000 # Keep alive for just under 6 hours
